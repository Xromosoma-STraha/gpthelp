#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PL23
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Northwind")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertCompetitions(Competitions instance);
    partial void UpdateCompetitions(Competitions instance);
    partial void DeleteCompetitions(Competitions instance);
    partial void InsertResults(Results instance);
    partial void UpdateResults(Results instance);
    partial void DeleteResults(Results instance);
    partial void InsertSportsman(Sportsman instance);
    partial void UpdateSportsman(Sportsman instance);
    partial void DeleteSportsman(Sportsman instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::PL23.Properties.Settings.Default.NorthwindConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Competitions> Competitions
		{
			get
			{
				return this.GetTable<Competitions>();
			}
		}
		
		public System.Data.Linq.Table<Results> Results
		{
			get
			{
				return this.GetTable<Results>();
			}
		}
		
		public System.Data.Linq.Table<Sportsman> Sportsman
		{
			get
			{
				return this.GetTable<Sportsman>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Competitions")]
	public partial class Competitions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdС;
		
		private string _name;
		
		private System.Nullable<int> _year;
		
		private EntitySet<Results> _Results;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdСChanging(int value);
    partial void OnIdСChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnyearChanging(System.Nullable<int> value);
    partial void OnyearChanged();
    #endregion
		
		public Competitions()
		{
			this._Results = new EntitySet<Results>(new Action<Results>(this.attach_Results), new Action<Results>(this.detach_Results));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdС", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdС
		{
			get
			{
				return this._IdС;
			}
			set
			{
				if ((this._IdС != value))
				{
					this.OnIdСChanging(value);
					this.SendPropertyChanging();
					this._IdС = value;
					this.SendPropertyChanged("IdС");
					this.OnIdСChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NChar(100)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_year", DbType="Int")]
		public System.Nullable<int> year
		{
			get
			{
				return this._year;
			}
			set
			{
				if ((this._year != value))
				{
					this.OnyearChanging(value);
					this.SendPropertyChanging();
					this._year = value;
					this.SendPropertyChanged("year");
					this.OnyearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Competitions_Results", Storage="_Results", ThisKey="IdС", OtherKey="IdC")]
		public EntitySet<Results> Results
		{
			get
			{
				return this._Results;
			}
			set
			{
				this._Results.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Results(Results entity)
		{
			this.SendPropertyChanging();
			entity.Competitions = this;
		}
		
		private void detach_Results(Results entity)
		{
			this.SendPropertyChanging();
			entity.Competitions = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Results")]
	public partial class Results : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdR;
		
		private int _IdS;
		
		private int _IdC;
		
		private System.Nullable<double> _fSq;
		
		private System.Nullable<double> _sSq;
		
		private System.Nullable<double> _tSq;
		
		private System.Nullable<double> _fB;
		
		private System.Nullable<double> _sB;
		
		private System.Nullable<double> _tB;
		
		private System.Nullable<double> _fDL;
		
		private System.Nullable<double> _sDL;
		
		private System.Nullable<double> _tDL;
		
		private EntityRef<Competitions> _Competitions;
		
		private EntityRef<Sportsman> _Sportsman;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdRChanging(int value);
    partial void OnIdRChanged();
    partial void OnIdSChanging(int value);
    partial void OnIdSChanged();
    partial void OnIdCChanging(int value);
    partial void OnIdCChanged();
    partial void OnfSqChanging(System.Nullable<double> value);
    partial void OnfSqChanged();
    partial void OnsSqChanging(System.Nullable<double> value);
    partial void OnsSqChanged();
    partial void OntSqChanging(System.Nullable<double> value);
    partial void OntSqChanged();
    partial void OnfBChanging(System.Nullable<double> value);
    partial void OnfBChanged();
    partial void OnsBChanging(System.Nullable<double> value);
    partial void OnsBChanged();
    partial void OntBChanging(System.Nullable<double> value);
    partial void OntBChanged();
    partial void OnfDLChanging(System.Nullable<double> value);
    partial void OnfDLChanged();
    partial void OnsDLChanging(System.Nullable<double> value);
    partial void OnsDLChanged();
    partial void OntDLChanging(System.Nullable<double> value);
    partial void OntDLChanged();
    #endregion
		
		public Results()
		{
			this._Competitions = default(EntityRef<Competitions>);
			this._Sportsman = default(EntityRef<Sportsman>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdR", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdR
		{
			get
			{
				return this._IdR;
			}
			set
			{
				if ((this._IdR != value))
				{
					this.OnIdRChanging(value);
					this.SendPropertyChanging();
					this._IdR = value;
					this.SendPropertyChanged("IdR");
					this.OnIdRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdS", DbType="Int NOT NULL")]
		public int IdS
		{
			get
			{
				return this._IdS;
			}
			set
			{
				if ((this._IdS != value))
				{
					if (this._Sportsman.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdSChanging(value);
					this.SendPropertyChanging();
					this._IdS = value;
					this.SendPropertyChanged("IdS");
					this.OnIdSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdC", DbType="Int NOT NULL")]
		public int IdC
		{
			get
			{
				return this._IdC;
			}
			set
			{
				if ((this._IdC != value))
				{
					if (this._Competitions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCChanging(value);
					this.SendPropertyChanging();
					this._IdC = value;
					this.SendPropertyChanged("IdC");
					this.OnIdCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fSq", DbType="Float")]
		public System.Nullable<double> fSq
		{
			get
			{
				return this._fSq;
			}
			set
			{
				if ((this._fSq != value))
				{
					this.OnfSqChanging(value);
					this.SendPropertyChanging();
					this._fSq = value;
					this.SendPropertyChanged("fSq");
					this.OnfSqChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sSq", DbType="Float")]
		public System.Nullable<double> sSq
		{
			get
			{
				return this._sSq;
			}
			set
			{
				if ((this._sSq != value))
				{
					this.OnsSqChanging(value);
					this.SendPropertyChanging();
					this._sSq = value;
					this.SendPropertyChanged("sSq");
					this.OnsSqChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tSq", DbType="Float")]
		public System.Nullable<double> tSq
		{
			get
			{
				return this._tSq;
			}
			set
			{
				if ((this._tSq != value))
				{
					this.OntSqChanging(value);
					this.SendPropertyChanging();
					this._tSq = value;
					this.SendPropertyChanged("tSq");
					this.OntSqChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fB", DbType="Float")]
		public System.Nullable<double> fB
		{
			get
			{
				return this._fB;
			}
			set
			{
				if ((this._fB != value))
				{
					this.OnfBChanging(value);
					this.SendPropertyChanging();
					this._fB = value;
					this.SendPropertyChanged("fB");
					this.OnfBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sB", DbType="Float")]
		public System.Nullable<double> sB
		{
			get
			{
				return this._sB;
			}
			set
			{
				if ((this._sB != value))
				{
					this.OnsBChanging(value);
					this.SendPropertyChanging();
					this._sB = value;
					this.SendPropertyChanged("sB");
					this.OnsBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tB", DbType="Float")]
		public System.Nullable<double> tB
		{
			get
			{
				return this._tB;
			}
			set
			{
				if ((this._tB != value))
				{
					this.OntBChanging(value);
					this.SendPropertyChanging();
					this._tB = value;
					this.SendPropertyChanged("tB");
					this.OntBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fDL", DbType="Float")]
		public System.Nullable<double> fDL
		{
			get
			{
				return this._fDL;
			}
			set
			{
				if ((this._fDL != value))
				{
					this.OnfDLChanging(value);
					this.SendPropertyChanging();
					this._fDL = value;
					this.SendPropertyChanged("fDL");
					this.OnfDLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sDL", DbType="Float")]
		public System.Nullable<double> sDL
		{
			get
			{
				return this._sDL;
			}
			set
			{
				if ((this._sDL != value))
				{
					this.OnsDLChanging(value);
					this.SendPropertyChanging();
					this._sDL = value;
					this.SendPropertyChanged("sDL");
					this.OnsDLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tDL", DbType="Float")]
		public System.Nullable<double> tDL
		{
			get
			{
				return this._tDL;
			}
			set
			{
				if ((this._tDL != value))
				{
					this.OntDLChanging(value);
					this.SendPropertyChanging();
					this._tDL = value;
					this.SendPropertyChanged("tDL");
					this.OntDLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Competitions_Results", Storage="_Competitions", ThisKey="IdC", OtherKey="IdС", IsForeignKey=true)]
		public Competitions Competitions
		{
			get
			{
				return this._Competitions.Entity;
			}
			set
			{
				Competitions previousValue = this._Competitions.Entity;
				if (((previousValue != value) 
							|| (this._Competitions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Competitions.Entity = null;
						previousValue.Results.Remove(this);
					}
					this._Competitions.Entity = value;
					if ((value != null))
					{
						value.Results.Add(this);
						this._IdC = value.IdС;
					}
					else
					{
						this._IdC = default(int);
					}
					this.SendPropertyChanged("Competitions");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sportsman_Results", Storage="_Sportsman", ThisKey="IdS", OtherKey="IdS", IsForeignKey=true)]
		public Sportsman Sportsman
		{
			get
			{
				return this._Sportsman.Entity;
			}
			set
			{
				Sportsman previousValue = this._Sportsman.Entity;
				if (((previousValue != value) 
							|| (this._Sportsman.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sportsman.Entity = null;
						previousValue.Results.Remove(this);
					}
					this._Sportsman.Entity = value;
					if ((value != null))
					{
						value.Results.Add(this);
						this._IdS = value.IdS;
					}
					else
					{
						this._IdS = default(int);
					}
					this.SendPropertyChanged("Sportsman");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sportsman")]
	public partial class Sportsman : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdS;
		
		private string _name;
		
		private System.Nullable<double> _weight;
		
		private System.Nullable<int> _age;
		
		private EntitySet<Results> _Results;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdSChanging(int value);
    partial void OnIdSChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnweightChanging(System.Nullable<double> value);
    partial void OnweightChanged();
    partial void OnageChanging(System.Nullable<int> value);
    partial void OnageChanged();
    #endregion
		
		public Sportsman()
		{
			this._Results = new EntitySet<Results>(new Action<Results>(this.attach_Results), new Action<Results>(this.detach_Results));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdS", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdS
		{
			get
			{
				return this._IdS;
			}
			set
			{
				if ((this._IdS != value))
				{
					this.OnIdSChanging(value);
					this.SendPropertyChanging();
					this._IdS = value;
					this.SendPropertyChanged("IdS");
					this.OnIdSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NChar(100)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weight", DbType="Float")]
		public System.Nullable<double> weight
		{
			get
			{
				return this._weight;
			}
			set
			{
				if ((this._weight != value))
				{
					this.OnweightChanging(value);
					this.SendPropertyChanging();
					this._weight = value;
					this.SendPropertyChanged("weight");
					this.OnweightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_age", DbType="Int")]
		public System.Nullable<int> age
		{
			get
			{
				return this._age;
			}
			set
			{
				if ((this._age != value))
				{
					this.OnageChanging(value);
					this.SendPropertyChanging();
					this._age = value;
					this.SendPropertyChanged("age");
					this.OnageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sportsman_Results", Storage="_Results", ThisKey="IdS", OtherKey="IdS")]
		public EntitySet<Results> Results
		{
			get
			{
				return this._Results;
			}
			set
			{
				this._Results.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Results(Results entity)
		{
			this.SendPropertyChanging();
			entity.Sportsman = this;
		}
		
		private void detach_Results(Results entity)
		{
			this.SendPropertyChanging();
			entity.Sportsman = null;
		}
	}
}
#pragma warning restore 1591
